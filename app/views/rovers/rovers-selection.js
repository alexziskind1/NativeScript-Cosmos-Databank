"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length
var observable_1 = require("data/observable");
var pickers_view_model_1 = require("../../view-models/rovers/pickers-view-model");
var app = require("application");
exports.pickersViewModel = new pickers_view_model_1.PickersViewModel();
var page;
var dtCur;
var dtOpp;
var dtSpi;
function onPageLoaded(args) {
    page = args.object;
}
exports.onPageLoaded = onPageLoaded;
function onPageNavigatedTo(args) {
    page = args.object;
    dtCur = page.getViewById("dt-cur");
    dtOpp = page.getViewById("dt-opp");
    dtSpi = page.getViewById("dt-spi");
    initDatePickers();
    initSegmentedBars();
    initTabs();
    page.bindingContext = exports.pickersViewModel;
}
exports.onPageNavigatedTo = onPageNavigatedTo;
function onTabLoaded(args) {
    var tabView = args.object;
    if (app.android) {
        for (var i = 0; i < tabView.items.length; i++) {
            tabView._tabLayout.getTextViewForItemAt(i).setHorizontallyScrolling(true);
        }
    }
}
exports.onTabLoaded = onTabLoaded;
function initTabs() {
    exports.pickersViewModel.addEventListener(observable_1.Observable.propertyChangeEvent, function (args) {
        if (args.propertyName.toString() === "tabIndex") {
            initDatePickers();
        }
    });
}
function initDatePickers() {
    var today = new Date();
    dtCur.minDate = new Date(2012, 6 + 1, 6); // Landing date: 6th August 2012
    dtCur.maxDate = today; // still active
    dtOpp.minDate = new Date(2004, 0, 26); // Landing date: 25th January 2004 - first pics on 26th
    dtOpp.maxDate = today; // still active 
    dtSpi.minDate = new Date(2004, 0, 5); // Landing date: 4th January 2004 - first pics on 5th
    dtSpi.maxDate = new Date(2010, 1 + 1, 21); // last communication March
    if (!exports.pickersViewModel.get("rover")) {
        dtCur.day = today.getDate() - 2;
        dtCur.month = today.getMonth() + 1;
        dtCur.year = today.getFullYear();
        dtOpp.day = today.getDate() - 2;
        dtOpp.month = today.getMonth() + 1;
        dtOpp.year = today.getFullYear();
        dtSpi.day = today.getDate() - 2;
        dtSpi.month = today.getMonth() + 1;
        dtSpi.year = 2007;
        exports.pickersViewModel.set("day", dtCur.day);
        exports.pickersViewModel.set("month", dtCur.month);
        exports.pickersViewModel.set("year", dtCur.year);
        exports.pickersViewModel.set("dayOpp", dtOpp.day);
        exports.pickersViewModel.set("monthOpp", dtOpp.month);
        exports.pickersViewModel.set("yearOpp", dtOpp.year);
        exports.pickersViewModel.set("daySpi", dtSpi.day);
        exports.pickersViewModel.set("monthSpi", dtSpi.month);
        exports.pickersViewModel.set("yearSpi", dtSpi.year);
    }
    else {
        dtCur.day = exports.pickersViewModel.get("day");
        dtCur.month = exports.pickersViewModel.get("month");
        dtCur.year = exports.pickersViewModel.get("year");
        dtOpp.day = exports.pickersViewModel.get("dayOpp");
        dtOpp.month = exports.pickersViewModel.get("monthOpp");
        dtOpp.year = exports.pickersViewModel.get("yearOpp");
        dtSpi.day = exports.pickersViewModel.get("daySpi");
        dtSpi.month = exports.pickersViewModel.get("monthSpi");
        dtSpi.year = exports.pickersViewModel.get("yearSpi");
    }
}
function initSegmentedBars() {
    exports.pickersViewModel.set("selectedIndexCur", 1);
    exports.pickersViewModel.set("selectedIndexOpp", 1);
    exports.pickersViewModel.set("selectedIndexSpi", 1);
    exports.pickersViewModel.set("isCurInfoVisible", false);
    exports.pickersViewModel.set("isOppInfoVisible", false);
    exports.pickersViewModel.set("isSpiInfoVisible", false);
    exports.pickersViewModel.set("curiosityDescription", "Curiosity is a car-sized robotic rover exploring Gale Crater on Mars as part of NASA's Mars Science Laboratory mission (MSL)");
    exports.pickersViewModel.set("opporunityDescription", "Curiosity is a car-sized robotic rover exploring Gale Crater on Mars as part of NASA's Mars Science Laboratory mission (MSL)");
    exports.pickersViewModel.set("spiritDescription", "Curiosity is a car-sized robotic rover exploring Gale Crater on Mars as part of NASA's Mars Science Laboratory mission (MSL)");
    exports.pickersViewModel.addEventListener(observable_1.Observable.propertyChangeEvent, function (args) {
        if (args.propertyName.toString() === "selectedIndexCur") {
            switch (args.value) {
                case 0:
                    exports.pickersViewModel.set("isCurInfoVisible", true);
                    break;
                case 1:
                    exports.pickersViewModel.set("isCurInfoVisible", false);
                    break;
                default:
                    break;
            }
        }
    });
    exports.pickersViewModel.addEventListener(observable_1.Observable.propertyChangeEvent, function (args) {
        if (args.propertyName.toString() === "selectedIndexOpp") {
            switch (args.value) {
                case 0:
                    exports.pickersViewModel.set("isOppInfoVisible", true);
                    break;
                case 1:
                    exports.pickersViewModel.set("isOppInfoVisible", false);
                    break;
                default:
                    break;
            }
        }
    });
    exports.pickersViewModel.addEventListener(observable_1.Observable.propertyChangeEvent, function (args) {
        if (args.propertyName.toString() === "selectedIndexSpi") {
            switch (args.value) {
                case 0:
                    exports.pickersViewModel.set("isSpiInfoVisible", true);
                    break;
                case 1:
                    exports.pickersViewModel.set("isSpiInfoVisible", false);
                    break;
                default:
                    break;
            }
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm92ZXJzLXNlbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJvdmVycy1zZWxlY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFDakMsOENBQTRFO0FBUzVFLGtGQUErRTtBQUUvRSxpQ0FBbUM7QUFFeEIsUUFBQSxnQkFBZ0IsR0FBRyxJQUFJLHFDQUFnQixFQUFFLENBQUM7QUFDckQsSUFBSSxJQUFJLENBQUM7QUFDVCxJQUFJLEtBQUssQ0FBQztBQUNWLElBQUksS0FBSyxDQUFDO0FBQ1YsSUFBSSxLQUFLLENBQUM7QUFFVixzQkFBNkIsSUFBZTtJQUN4QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUM3QixDQUFDO0FBRkQsb0NBRUM7QUFFRCwyQkFBa0MsSUFBZTtJQUM3QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUV6QixLQUFLLEdBQWUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxLQUFLLEdBQWUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxLQUFLLEdBQWUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUvQyxlQUFlLEVBQUUsQ0FBQztJQUNsQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLFFBQVEsRUFBRSxDQUFDO0lBRVgsSUFBSSxDQUFDLGNBQWMsR0FBRyx3QkFBZ0IsQ0FBQztBQUMzQyxDQUFDO0FBWkQsOENBWUM7QUFFRCxxQkFBNEIsSUFBSTtJQUM1QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzFCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVB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QUUsVUFBVSxJQUF3QjtRQUNoRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxLQUFLLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDakIsS0FBSyxDQUFDO29CQUNGLHdCQUFnQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDL0MsS0FBSyxDQUFDO2dCQUNWLEtBQUssQ0FBQztvQkFDRix3QkFBZ0IsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ2hELEtBQUssQ0FBQztnQkFDVjtvQkFDSSxLQUFLLENBQUM7WUFDZCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsd0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsdUJBQVUsQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLElBQXdCO1FBQ2hHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEtBQUssa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixLQUFLLENBQUM7b0JBQ0Ysd0JBQWdCLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO29CQUMvQyxLQUFLLENBQUM7Z0JBQ1YsS0FBSyxDQUFDO29CQUNGLHdCQUFnQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFDaEQsS0FBSyxDQUFDO2dCQUNWO29CQUNJLEtBQUssQ0FBQztZQUNkLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoXG5pbXBvcnQgeyBFdmVudERhdGEsIE9ic2VydmFibGUsIFByb3BlcnR5Q2hhbmdlRGF0YSB9IGZyb20gXCJkYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IHRvcG1vc3QgfSBmcm9tIFwidWkvZnJhbWVcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwidWkvcGFnZVwiO1xuaW1wb3J0IHsgRGF0ZVBpY2tlciB9IGZyb20gXCJ1aS9kYXRlLXBpY2tlclwiO1xuaW1wb3J0IHsgU2VnbWVudGVkQmFyIH0gZnJvbSBcInVpL3NlZ21lbnRlZC1iYXJcIjtcbmltcG9ydCB7IFRhYlZpZXcsIFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcInVpL3RhYi12aWV3XCI7XG5cbmltcG9ydCBkcmF3ZXJNb2R1bGUgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWkvc2lkZWRyYXdlclwiKTtcblxuaW1wb3J0IHsgUGlja2Vyc1ZpZXdNb2RlbCB9IGZyb20gXCIuLi8uLi92aWV3LW1vZGVscy9yb3ZlcnMvcGlja2Vycy12aWV3LW1vZGVsXCI7XG5cbmltcG9ydCAqIGFzIGFwcCBmcm9tIFwiYXBwbGljYXRpb25cIjtcblxuZXhwb3J0IGxldCBwaWNrZXJzVmlld01vZGVsID0gbmV3IFBpY2tlcnNWaWV3TW9kZWwoKTtcbmxldCBwYWdlO1xubGV0IGR0Q3VyO1xubGV0IGR0T3BwO1xubGV0IGR0U3BpO1xuXG5leHBvcnQgZnVuY3Rpb24gb25QYWdlTG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uUGFnZU5hdmlnYXRlZFRvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcblxuICAgIGR0Q3VyID0gPERhdGVQaWNrZXI+cGFnZS5nZXRWaWV3QnlJZChcImR0LWN1clwiKTtcbiAgICBkdE9wcCA9IDxEYXRlUGlja2VyPnBhZ2UuZ2V0Vmlld0J5SWQoXCJkdC1vcHBcIik7XG4gICAgZHRTcGkgPSA8RGF0ZVBpY2tlcj5wYWdlLmdldFZpZXdCeUlkKFwiZHQtc3BpXCIpO1xuXG4gICAgaW5pdERhdGVQaWNrZXJzKCk7XG4gICAgaW5pdFNlZ21lbnRlZEJhcnMoKTtcbiAgICBpbml0VGFicygpO1xuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHBpY2tlcnNWaWV3TW9kZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRhYkxvYWRlZChhcmdzKSB7XG4gICAgdmFyIHRhYlZpZXcgPSBhcmdzLm9iamVjdDtcbiAgICBpZiAoYXBwLmFuZHJvaWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJWaWV3Lml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0YWJWaWV3Ll90YWJMYXlvdXQuZ2V0VGV4dFZpZXdGb3JJdGVtQXQoaSkuc2V0SG9yaXpvbnRhbGx5U2Nyb2xsaW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0VGFicygpIHtcbiAgICBwaWNrZXJzVmlld01vZGVsLmFkZEV2ZW50TGlzdGVuZXIoT2JzZXJ2YWJsZS5wcm9wZXJ0eUNoYW5nZUV2ZW50LCBmdW5jdGlvbiAoYXJnczogUHJvcGVydHlDaGFuZ2VEYXRhKSB7XG4gICAgICAgIGlmIChhcmdzLnByb3BlcnR5TmFtZS50b1N0cmluZygpID09PSBcInRhYkluZGV4XCIpIHtcbiAgICAgICAgICAgIGluaXREYXRlUGlja2VycygpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRlUGlja2VycygpIHtcbiAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuXG4gICAgZHRDdXIubWluRGF0ZSA9IG5ldyBEYXRlKDIwMTIsIDYgKyAxLCA2KTsgLy8gTGFuZGluZyBkYXRlOiA2dGggQXVndXN0IDIwMTJcbiAgICBkdEN1ci5tYXhEYXRlID0gdG9kYXk7IC8vIHN0aWxsIGFjdGl2ZVxuXG4gICAgZHRPcHAubWluRGF0ZSA9IG5ldyBEYXRlKDIwMDQsIDAsIDI2KTsgLy8gTGFuZGluZyBkYXRlOiAyNXRoIEphbnVhcnkgMjAwNCAtIGZpcnN0IHBpY3Mgb24gMjZ0aFxuICAgIGR0T3BwLm1heERhdGUgPSB0b2RheTsgLy8gc3RpbGwgYWN0aXZlIFxuXG4gICAgZHRTcGkubWluRGF0ZSA9IG5ldyBEYXRlKDIwMDQsIDAsIDUpOyAvLyBMYW5kaW5nIGRhdGU6IDR0aCBKYW51YXJ5IDIwMDQgLSBmaXJzdCBwaWNzIG9uIDV0aFxuICAgIGR0U3BpLm1heERhdGUgPSBuZXcgRGF0ZSgyMDEwLCAxICsgMSwgMjEpOyAvLyBsYXN0IGNvbW11bmljYXRpb24gTWFyY2hcblxuICAgIGlmICghcGlja2Vyc1ZpZXdNb2RlbC5nZXQoXCJyb3ZlclwiKSkge1xuICAgICAgICBkdEN1ci5kYXkgPSB0b2RheS5nZXREYXRlKCkgLSAyO1xuICAgICAgICBkdEN1ci5tb250aCA9IHRvZGF5LmdldE1vbnRoKCkgKyAxO1xuICAgICAgICBkdEN1ci55ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcblxuICAgICAgICBkdE9wcC5kYXkgPSB0b2RheS5nZXREYXRlKCkgLSAyO1xuICAgICAgICBkdE9wcC5tb250aCA9IHRvZGF5LmdldE1vbnRoKCkgKyAxO1xuICAgICAgICBkdE9wcC55ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcblxuICAgICAgICBkdFNwaS5kYXkgPSB0b2RheS5nZXREYXRlKCkgLSAyO1xuICAgICAgICBkdFNwaS5tb250aCA9IHRvZGF5LmdldE1vbnRoKCkgKyAxO1xuICAgICAgICBkdFNwaS55ZWFyID0gMjAwNztcblxuICAgICAgICBwaWNrZXJzVmlld01vZGVsLnNldChcImRheVwiLCBkdEN1ci5kYXkpO1xuICAgICAgICBwaWNrZXJzVmlld01vZGVsLnNldChcIm1vbnRoXCIsIGR0Q3VyLm1vbnRoKTtcbiAgICAgICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJ5ZWFyXCIsIGR0Q3VyLnllYXIpO1xuXG4gICAgICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwiZGF5T3BwXCIsIGR0T3BwLmRheSk7XG4gICAgICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwibW9udGhPcHBcIiwgZHRPcHAubW9udGgpO1xuICAgICAgICBwaWNrZXJzVmlld01vZGVsLnNldChcInllYXJPcHBcIiwgZHRPcHAueWVhcik7XG5cbiAgICAgICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJkYXlTcGlcIiwgZHRTcGkuZGF5KTtcbiAgICAgICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJtb250aFNwaVwiLCBkdFNwaS5tb250aCk7XG4gICAgICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwieWVhclNwaVwiLCBkdFNwaS55ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkdEN1ci5kYXkgPSBwaWNrZXJzVmlld01vZGVsLmdldChcImRheVwiKTtcbiAgICAgICAgZHRDdXIubW9udGggPSBwaWNrZXJzVmlld01vZGVsLmdldChcIm1vbnRoXCIpO1xuICAgICAgICBkdEN1ci55ZWFyID0gcGlja2Vyc1ZpZXdNb2RlbC5nZXQoXCJ5ZWFyXCIpO1xuXG4gICAgICAgIGR0T3BwLmRheSA9IHBpY2tlcnNWaWV3TW9kZWwuZ2V0KFwiZGF5T3BwXCIpO1xuICAgICAgICBkdE9wcC5tb250aCA9IHBpY2tlcnNWaWV3TW9kZWwuZ2V0KFwibW9udGhPcHBcIik7XG4gICAgICAgIGR0T3BwLnllYXIgPSBwaWNrZXJzVmlld01vZGVsLmdldChcInllYXJPcHBcIik7XG5cbiAgICAgICAgZHRTcGkuZGF5ID0gcGlja2Vyc1ZpZXdNb2RlbC5nZXQoXCJkYXlTcGlcIik7XG4gICAgICAgIGR0U3BpLm1vbnRoID0gcGlja2Vyc1ZpZXdNb2RlbC5nZXQoXCJtb250aFNwaVwiKTtcbiAgICAgICAgZHRTcGkueWVhciA9IHBpY2tlcnNWaWV3TW9kZWwuZ2V0KFwieWVhclNwaVwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGluaXRTZWdtZW50ZWRCYXJzKCkge1xuICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwic2VsZWN0ZWRJbmRleEN1clwiLCAxKTtcbiAgICBwaWNrZXJzVmlld01vZGVsLnNldChcInNlbGVjdGVkSW5kZXhPcHBcIiwgMSk7XG4gICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJzZWxlY3RlZEluZGV4U3BpXCIsIDEpO1xuXG4gICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJpc0N1ckluZm9WaXNpYmxlXCIsIGZhbHNlKTtcbiAgICBwaWNrZXJzVmlld01vZGVsLnNldChcImlzT3BwSW5mb1Zpc2libGVcIiwgZmFsc2UpO1xuICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwiaXNTcGlJbmZvVmlzaWJsZVwiLCBmYWxzZSk7XG5cbiAgICBwaWNrZXJzVmlld01vZGVsLnNldChcImN1cmlvc2l0eURlc2NyaXB0aW9uXCIsIFwiQ3VyaW9zaXR5IGlzIGEgY2FyLXNpemVkIHJvYm90aWMgcm92ZXIgZXhwbG9yaW5nIEdhbGUgQ3JhdGVyIG9uIE1hcnMgYXMgcGFydCBvZiBOQVNBJ3MgTWFycyBTY2llbmNlIExhYm9yYXRvcnkgbWlzc2lvbiAoTVNMKVwiKTtcbiAgICBwaWNrZXJzVmlld01vZGVsLnNldChcIm9wcG9ydW5pdHlEZXNjcmlwdGlvblwiLCBcIkN1cmlvc2l0eSBpcyBhIGNhci1zaXplZCByb2JvdGljIHJvdmVyIGV4cGxvcmluZyBHYWxlIENyYXRlciBvbiBNYXJzIGFzIHBhcnQgb2YgTkFTQSdzIE1hcnMgU2NpZW5jZSBMYWJvcmF0b3J5IG1pc3Npb24gKE1TTClcIik7XG4gICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJzcGlyaXREZXNjcmlwdGlvblwiLCBcIkN1cmlvc2l0eSBpcyBhIGNhci1zaXplZCByb2JvdGljIHJvdmVyIGV4cGxvcmluZyBHYWxlIENyYXRlciBvbiBNYXJzIGFzIHBhcnQgb2YgTkFTQSdzIE1hcnMgU2NpZW5jZSBMYWJvcmF0b3J5IG1pc3Npb24gKE1TTClcIik7XG5cbiAgICBwaWNrZXJzVmlld01vZGVsLmFkZEV2ZW50TGlzdGVuZXIoT2JzZXJ2YWJsZS5wcm9wZXJ0eUNoYW5nZUV2ZW50LCBmdW5jdGlvbiAoYXJnczogUHJvcGVydHlDaGFuZ2VEYXRhKSB7XG4gICAgICAgIGlmIChhcmdzLnByb3BlcnR5TmFtZS50b1N0cmluZygpID09PSBcInNlbGVjdGVkSW5kZXhDdXJcIikge1xuICAgICAgICAgICAgc3dpdGNoIChhcmdzLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBwaWNrZXJzVmlld01vZGVsLnNldChcImlzQ3VySW5mb1Zpc2libGVcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJpc0N1ckluZm9WaXNpYmxlXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHBpY2tlcnNWaWV3TW9kZWwuYWRkRXZlbnRMaXN0ZW5lcihPYnNlcnZhYmxlLnByb3BlcnR5Q2hhbmdlRXZlbnQsIGZ1bmN0aW9uIChhcmdzOiBQcm9wZXJ0eUNoYW5nZURhdGEpIHtcbiAgICAgICAgaWYgKGFyZ3MucHJvcGVydHlOYW1lLnRvU3RyaW5nKCkgPT09IFwic2VsZWN0ZWRJbmRleE9wcFwiKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGFyZ3MudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwiaXNPcHBJbmZvVmlzaWJsZVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBwaWNrZXJzVmlld01vZGVsLnNldChcImlzT3BwSW5mb1Zpc2libGVcIiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcGlja2Vyc1ZpZXdNb2RlbC5hZGRFdmVudExpc3RlbmVyKE9ic2VydmFibGUucHJvcGVydHlDaGFuZ2VFdmVudCwgZnVuY3Rpb24gKGFyZ3M6IFByb3BlcnR5Q2hhbmdlRGF0YSkge1xuICAgICAgICBpZiAoYXJncy5wcm9wZXJ0eU5hbWUudG9TdHJpbmcoKSA9PT0gXCJzZWxlY3RlZEluZGV4U3BpXCIpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYXJncy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcGlja2Vyc1ZpZXdNb2RlbC5zZXQoXCJpc1NwaUluZm9WaXNpYmxlXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHBpY2tlcnNWaWV3TW9kZWwuc2V0KFwiaXNTcGlJbmZvVmlzaWJsZVwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG4iXX0=