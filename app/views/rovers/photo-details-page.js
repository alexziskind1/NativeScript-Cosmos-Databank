"use strict";
var observable_1 = require("data/observable");
var frame_1 = require("ui/frame");
var application = require("application");
var imageSource = require("image-source");
var utils = require("utils/utils");
var firebase_1 = require("../helpers/firebase/firebase");
var SocialShare = require("nativescript-social-share");
if (application.android) {
    var toast = require("nativescript-toast");
}
var file_helpers_1 = require("../helpers/files/file-helpers");
var viewModel;
var page;
var shareButton;
var saveButton;
var desktopButton;
var iosImage;
var currentImage;
var currentSavedPath;
function onPageNavigatedTo(args) {
    page = args.object;
    shareButton = page.getViewById("btn-shar");
    saveButton = page.getViewById("btn-save");
    desktopButton = page.getViewById("btn-desk");
    if (application.android) {
        file_helpers_1.setButtonsOpacity(shareButton, saveButton, desktopButton, 0.2);
    }
    if (application.ios) {
        iosImage = page.getViewById("ios-image");
    }
    var navContext = page.navigationContext;
    viewModel = new observable_1.Observable();
    viewModel.set("contextItem", navContext["tappedItem"]);
    page.bindingContext = viewModel;
}
exports.onPageNavigatedTo = onPageNavigatedTo;
function goBack(args) {
    frame_1.topmost().goBack();
}
exports.goBack = goBack;
function onFinalImageSet(args) {
    var drawee = args.object;
    currentImage = file_helpers_1.setCurrentImage(drawee.imageUri);
    saveButton.animate({ opacity: 0.2, rotate: 360 })
        .then(function () { return saveButton.animate({ opacity: 0.5, rotate: 180, duration: 150 }); })
        .then(function () { return saveButton.animate({ opacity: 1.0, rotate: 0, duration: 150 }); });
    desktopButton.animate({ opacity: 0.2, rotate: 360 })
        .then(function () { return desktopButton.animate({ opacity: 0.5, rotate: 180, duration: 150 }); })
        .then(function () { return desktopButton.animate({ opacity: 1.0, rotate: 0, duration: 150 }); });
    shareButton.animate({ opacity: 0.2, rotate: 360 })
        .then(function () { return shareButton.animate({ opacity: 0.5, rotate: 180, duration: 150 }); })
        .then(function () { return shareButton.animate({ opacity: 1.0, rotate: 0, duration: 150 }); })
        .then(function () { file_helpers_1.setUserInteraction(shareButton, saveButton, desktopButton, true); });
}
exports.onFinalImageSet = onFinalImageSet;
function onSaveImage(args) {
    firebase_1.firebasePush(viewModel.get("contextItem"), "save");
    if (application.ios) {
        imageSource.fromUrl(iosImage.src)
            .then(function (res) {
            file_helpers_1.saveFile(res, viewModel.get("contextItem").imageUri, currentSavedPath);
        }).catch(function (err) {
            console.log(err);
        });
    }
    else if (application.android) {
        file_helpers_1.saveFile(currentImage, viewModel.get("contextItem").imageUri, currentSavedPath);
        toast.makeText("Photo saved in /Downloads/CosmosDataBank/").show();
    }
}
exports.onSaveImage = onSaveImage;
function onSetWallpaper(args) {
    firebase_1.firebasePush(viewModel.get("contextItem"), "wallpaper");
    if (application.ios) {
        imageSource.fromUrl(iosImage.src)
            .then(function (res) {
            currentImage = res; // TODO : set wallpaper for iOS
        }).catch(function (err) {
            console.log(err);
        });
        ;
    }
    else if (application.android) {
        file_helpers_1.saveFile(currentImage, viewModel.get("contextItem").imageUri, currentSavedPath);
        var wallpaperManager = android.app.WallpaperManager.getInstance(utils.ad.getApplicationContext());
        try {
            wallpaperManager.setBitmap(currentImage.android);
        }
        catch (error) {
            console.log(error);
        }
        toast.makeText("Wallpaper Set!").show();
    }
}
exports.onSetWallpaper = onSetWallpaper;
function onShare(args) {
    firebase_1.firebasePush(viewModel.get("contextItem"), "share");
    if (application.android) {
        SocialShare.shareImage(currentImage, "Mars Rovers");
    }
    else if (application.ios) {
        imageSource.fromUrl(iosImage.src)
            .then(function (res) {
            SocialShare.shareImage(res);
        }).catch(function (err) {
            console.log(err);
        });
    }
}
exports.onShare = onShare;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvdG8tZGV0YWlscy1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGhvdG8tZGV0YWlscy1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw4Q0FBd0Q7QUFHeEQsa0NBQW1DO0FBR25DLHlDQUEyQztBQUMzQywwQ0FBNEM7QUFDNUMsbUNBQXFDO0FBQ3JDLHlEQUE0RDtBQUU1RCx1REFBeUQ7QUFFekQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELDhEQUFpSDtBQUVqSCxJQUFJLFNBQXFCLENBQUM7QUFDMUIsSUFBSSxJQUFVLENBQUM7QUFDZixJQUFJLFdBQW1CLENBQUM7QUFDeEIsSUFBSSxVQUFrQixDQUFDO0FBQ3ZCLElBQUksYUFBcUIsQ0FBQztBQUMxQixJQUFJLFFBQWUsQ0FBQztBQUVwQixJQUFJLFlBQXFDLENBQUM7QUFDMUMsSUFBSSxnQkFBd0IsQ0FBQztBQUU3QiwyQkFBa0MsSUFBZTtJQUM3QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUV6QixXQUFXLEdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuRCxVQUFVLEdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRCxhQUFhLEdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVyRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0QixnQ0FBaUIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEIsUUFBUSxH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QyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0FBQ0wsQ0FBQztBQWRELDBCQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhLCBPYnNlcnZhYmxlIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInVpL2J1dHRvblwiO1xyXG5pbXBvcnQgeyB0b3Btb3N0IH0gZnJvbSBcInVpL2ZyYW1lXCI7XHJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcInVpL2ltYWdlXCI7XHJcbmltcG9ydCB7IEdlc3R1cmVFdmVudERhdGEgfSBmcm9tIFwidWkvZ2VzdHVyZXNcIjtcclxuaW1wb3J0ICogYXMgYXBwbGljYXRpb24gZnJvbSBcImFwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCAqIGFzIGltYWdlU291cmNlIGZyb20gXCJpbWFnZS1zb3VyY2VcIjtcclxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSBcInV0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCB7IGZpcmViYXNlUHVzaCB9IGZyb20gXCIuLi9oZWxwZXJzL2ZpcmViYXNlL2ZpcmViYXNlXCI7XHJcbmltcG9ydCB7IEZyZXNjb0RyYXdlZSwgRmluYWxFdmVudERhdGEgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWZyZXNjb1wiO1xyXG5pbXBvcnQgKiBhcyBTb2NpYWxTaGFyZSBmcm9tIFwibmF0aXZlc2NyaXB0LXNvY2lhbC1zaGFyZVwiO1xyXG5cclxuaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcclxuICAgIHZhciB0b2FzdCA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdG9hc3RcIik7XHJcbn1cclxuXHJcbmltcG9ydCB7IHNhdmVGaWxlLCBzZXRCdXR0b25zT3BhY2l0eSwgc2V0VXNlckludGVyYWN0aW9uLCBzZXRDdXJyZW50SW1hZ2UgfSBmcm9tIFwiLi4vaGVscGVycy9maWxlcy9maWxlLWhlbHBlcnNcIjtcclxuXHJcbmxldCB2aWV3TW9kZWw6IE9ic2VydmFibGU7XHJcbmxldCBwYWdlOiBQYWdlO1xyXG5sZXQgc2hhcmVCdXR0b246IEJ1dHRvbjtcclxubGV0IHNhdmVCdXR0b246IEJ1dHRvbjtcclxubGV0IGRlc2t0b3BCdXR0b246IEJ1dHRvbjtcclxubGV0IGlvc0ltYWdlOiBJbWFnZTtcclxuXHJcbmxldCBjdXJyZW50SW1hZ2U6IGltYWdlU291cmNlLkltYWdlU291cmNlO1xyXG52YXIgY3VycmVudFNhdmVkUGF0aDogc3RyaW5nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uUGFnZU5hdmlnYXRlZFRvKGFyZ3M6IEV2ZW50RGF0YSkge1xyXG4gICAgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xyXG5cclxuICAgIHNoYXJlQnV0dG9uID0gPEJ1dHRvbj5wYWdlLmdldFZpZXdCeUlkKFwiYnRuLXNoYXJcIik7XHJcbiAgICBzYXZlQnV0dG9uID0gPEJ1dHRvbj5wYWdlLmdldFZpZXdCeUlkKFwiYnRuLXNhdmVcIik7XHJcbiAgICBkZXNrdG9wQnV0dG9uID0gPEJ1dHRvbj5wYWdlLmdldFZpZXdCeUlkKFwiYnRuLWRlc2tcIik7XHJcblxyXG4gICAgaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcclxuICAgICAgICBzZXRCdXR0b25zT3BhY2l0eShzaGFyZUJ1dHRvbiwgc2F2ZUJ1dHRvbiwgZGVza3RvcEJ1dHRvbiwgMC4yKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXBwbGljYXRpb24uaW9zKSB7XHJcbiAgICAgICAgaW9zSW1hZ2UgPSA8SW1hZ2U+cGFnZS5nZXRWaWV3QnlJZChcImlvcy1pbWFnZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbmF2Q29udGV4dCA9IHBhZ2UubmF2aWdhdGlvbkNvbnRleHQ7XHJcbiAgICB2aWV3TW9kZWwgPSBuZXcgT2JzZXJ2YWJsZSgpO1xyXG4gICAgdmlld01vZGVsLnNldChcImNvbnRleHRJdGVtXCIsIG5hdkNvbnRleHRbXCJ0YXBwZWRJdGVtXCJdKTtcclxuXHJcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdmlld01vZGVsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ29CYWNrKGFyZ3M6IEV2ZW50RGF0YSkge1xyXG4gICAgdG9wbW9zdCgpLmdvQmFjaygpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25GaW5hbEltYWdlU2V0KGFyZ3M6IEZpbmFsRXZlbnREYXRhKSB7XHJcbiAgICB2YXIgZHJhd2VlID0gYXJncy5vYmplY3QgYXMgRnJlc2NvRHJhd2VlO1xyXG5cclxuICAgIGN1cnJlbnRJbWFnZSA9IHNldEN1cnJlbnRJbWFnZShkcmF3ZWUuaW1hZ2VVcmkpO1xyXG5cclxuICAgIHNhdmVCdXR0b24uYW5pbWF0ZSh7IG9wYWNpdHk6IDAuMiwgcm90YXRlOiAzNjAgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7IHJldHVybiBzYXZlQnV0dG9uLmFuaW1hdGUoeyBvcGFjaXR5OiAwLjUsIHJvdGF0ZTogMTgwLCBkdXJhdGlvbjogMTUwIH0pOyB9KVxyXG4gICAgICAgIC50aGVuKCgpID0+IHsgcmV0dXJuIHNhdmVCdXR0b24uYW5pbWF0ZSh7IG9wYWNpdHk6IDEuMCwgcm90YXRlOiAwLCBkdXJhdGlvbjogMTUwIH0pOyB9KTtcclxuXHJcbiAgICBkZXNrdG9wQnV0dG9uLmFuaW1hdGUoeyBvcGFjaXR5OiAwLjIsIHJvdGF0ZTogMzYwIH0pXHJcbiAgICAgICAgLnRoZW4oKCkgPT4geyByZXR1cm4gZGVza3RvcEJ1dHRvbi5hbmltYXRlKHsgb3BhY2l0eTogMC41LCByb3RhdGU6IDE4MCwgZHVyYXRpb246IDE1MCB9KTsgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7IHJldHVybiBkZXNrdG9wQnV0dG9uLmFuaW1hdGUoeyBvcGFjaXR5OiAxLjAsIHJvdGF0ZTogMCwgZHVyYXRpb246IDE1MCB9KTsgfSk7XHJcblxyXG4gICAgc2hhcmVCdXR0b24uYW5pbWF0ZSh7IG9wYWNpdHk6IDAuMiwgcm90YXRlOiAzNjAgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7IHJldHVybiBzaGFyZUJ1dHRvbi5hbmltYXRlKHsgb3BhY2l0eTogMC41LCByb3RhdGU6IDE4MCwgZHVyYXRpb246IDE1MCB9KTsgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7IHJldHVybiBzaGFyZUJ1dHRvbi5hbmltYXRlKHsgb3BhY2l0eTogMS4wLCByb3RhdGU6IDAsIGR1cmF0aW9uOiAxNTAgfSk7IH0pXHJcbiAgICAgICAgLnRoZW4oKCkgPT4geyBzZXRVc2VySW50ZXJhY3Rpb24oc2hhcmVCdXR0b24sIHNhdmVCdXR0b24sIGRlc2t0b3BCdXR0b24sIHRydWUpIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25TYXZlSW1hZ2UoYXJnczogRXZlbnREYXRhKSB7XHJcblxyXG4gICAgZmlyZWJhc2VQdXNoKHZpZXdNb2RlbC5nZXQoXCJjb250ZXh0SXRlbVwiKSwgXCJzYXZlXCIpO1xyXG5cclxuICAgIGlmIChhcHBsaWNhdGlvbi5pb3MpIHtcclxuICAgICAgICBpbWFnZVNvdXJjZS5mcm9tVXJsKGlvc0ltYWdlLnNyYylcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKHJlcywgdmlld01vZGVsLmdldChcImNvbnRleHRJdGVtXCIpLmltYWdlVXJpLCBjdXJyZW50U2F2ZWRQYXRoKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbi5hbmRyb2lkKSB7XHJcbiAgICAgICAgc2F2ZUZpbGUoY3VycmVudEltYWdlLCB2aWV3TW9kZWwuZ2V0KFwiY29udGV4dEl0ZW1cIikuaW1hZ2VVcmksIGN1cnJlbnRTYXZlZFBhdGgpO1xyXG4gICAgICAgIHRvYXN0Lm1ha2VUZXh0KFwiUGhvdG8gc2F2ZWQgaW4gL0Rvd25sb2Fkcy9Db3Ntb3NEYXRhQmFuay9cIikuc2hvdygpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25TZXRXYWxscGFwZXIoYXJnczogRXZlbnREYXRhKSB7XHJcblxyXG4gICAgZmlyZWJhc2VQdXNoKHZpZXdNb2RlbC5nZXQoXCJjb250ZXh0SXRlbVwiKSwgXCJ3YWxscGFwZXJcIik7XHJcblxyXG4gICAgaWYgKGFwcGxpY2F0aW9uLmlvcykge1xyXG4gICAgICAgIGltYWdlU291cmNlLmZyb21VcmwoaW9zSW1hZ2Uuc3JjKVxyXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEltYWdlID0gcmVzOyAvLyBUT0RPIDogc2V0IHdhbGxwYXBlciBmb3IgaU9TXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICB9KTs7XHJcbiAgICB9IGVsc2UgaWYgKGFwcGxpY2F0aW9uLmFuZHJvaWQpIHtcclxuXHJcbiAgICAgICAgc2F2ZUZpbGUoY3VycmVudEltYWdlLCB2aWV3TW9kZWwuZ2V0KFwiY29udGV4dEl0ZW1cIikuaW1hZ2VVcmksIGN1cnJlbnRTYXZlZFBhdGgpO1xyXG5cclxuICAgICAgICB2YXIgd2FsbHBhcGVyTWFuYWdlciA9IGFuZHJvaWQuYXBwLldhbGxwYXBlck1hbmFnZXIuZ2V0SW5zdGFuY2UodXRpbHMuYWQuZ2V0QXBwbGljYXRpb25Db250ZXh0KCkpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHdhbGxwYXBlck1hbmFnZXIuc2V0Qml0bWFwKGN1cnJlbnRJbWFnZS5hbmRyb2lkKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0b2FzdC5tYWtlVGV4dChcIldhbGxwYXBlciBTZXQhXCIpLnNob3coKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hhcmUoYXJnczogRXZlbnREYXRhKSB7XHJcblxyXG4gICAgZmlyZWJhc2VQdXNoKHZpZXdNb2RlbC5nZXQoXCJjb250ZXh0SXRlbVwiKSwgXCJzaGFyZVwiKTtcclxuXHJcbiAgICBpZiAoYXBwbGljYXRpb24uYW5kcm9pZCkge1xyXG4gICAgICAgIFNvY2lhbFNoYXJlLnNoYXJlSW1hZ2UoY3VycmVudEltYWdlLCBcIk1hcnMgUm92ZXJzXCIpO1xyXG4gICAgfSBlbHNlIGlmIChhcHBsaWNhdGlvbi5pb3MpIHtcclxuICAgICAgICBpbWFnZVNvdXJjZS5mcm9tVXJsKGlvc0ltYWdlLnNyYylcclxuICAgICAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIFNvY2lhbFNoYXJlLnNoYXJlSW1hZ2UocmVzKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==