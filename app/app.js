"use strict";
var application = require("application");
var fresco = require("nativescript-fresco");
var firebase = require("nativescript-plugin-firebase");
var appSettings = require("application-settings");
firebase.init({
    persist: true,
    // Optionally pass in properties for database, authentication and cloud messaging,
    // see their respective docs.
    onAuthStateChanged: function (data) {
        console.log(data.loggedIn ? "Logged in to firebase" : "Logged out from firebase");
        if (data.loggedIn) {
            console.log("user's email address: " + (data.user.email ? data.user.email : "N/A"));
            appSettings.setBoolean("isLogged", true);
        }
        else {
            appSettings.setBoolean("isLogged", false);
        }
    },
    onMessageReceivedCallback: function (message) {
        console.log("Title: " + message.title);
        console.log("Body: " + message.body);
        console.log(JSON.stringify(message));
        // if your server passed a custom property called 'foo', then do this:
        // console.log("Value of 'foo': " + message.favorites);
    }
}).then(function (instance) {
    console.log("firebase.init done");
}).catch(function (err) {
    console.log("Firebase init error: " + err);
});
if (application.android) {
    application.onLaunch = function (intent) {
        fresco.initialize();
    };
}
// application.start({ moduleName: "views/drawer-page" });
application.start({ moduleName: "views/login/login" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx5Q0FBNEM7QUFDNUMsNENBQStDO0FBQy9DLHVEQUEwRDtBQUMxRCxrREFBb0Q7QUFFcEQsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNWLE9BQU8sRUFBRSxJQUFJO0lBQ2Isa0ZBQWtGO0lBQ2xGLDZCQUE2QjtJQUM3QixrQkFBa0IsRUFBRSxVQUFVLElBQUk7UUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLHVCQUF1QixHQUFHLDBCQUEwQixDQUFDLENBQUM7UUFDbEYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDcEYsV0FBVyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osV0FBVyxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQztJQUNMLENBQUM7SUFFRCx5QkFBeUIsRUFBRSxVQUFVLE9BQU87UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNyQyxzRUFBc0U7UUFDdEUsdURBQXVEO0lBQzNELENBQUM7Q0FDSixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsUUFBUTtJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHO0lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsVUFBVSxNQUFNO1FBQ25DLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4QixDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsMERBQTBEO0FBQzFELFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwcGxpY2F0aW9uID0gcmVxdWlyZShcImFwcGxpY2F0aW9uXCIpO1xyXG5pbXBvcnQgZnJlc2NvID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1mcmVzY29cIik7XHJcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xyXG5pbXBvcnQgKiBhcyBhcHBTZXR0aW5ncyBmcm9tIFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIjtcclxuXHJcbmZpcmViYXNlLmluaXQoe1xyXG4gICAgcGVyc2lzdDogdHJ1ZSxcclxuICAgIC8vIE9wdGlvbmFsbHkgcGFzcyBpbiBwcm9wZXJ0aWVzIGZvciBkYXRhYmFzZSwgYXV0aGVudGljYXRpb24gYW5kIGNsb3VkIG1lc3NhZ2luZyxcclxuICAgIC8vIHNlZSB0aGVpciByZXNwZWN0aXZlIGRvY3MuXHJcbiAgICBvbkF1dGhTdGF0ZUNoYW5nZWQ6IGZ1bmN0aW9uIChkYXRhKSB7IC8vIG9wdGlvbmFsIGJ1dCB1c2VmdWwgdG8gaW1tZWRpYXRlbHkgcmUtbG9nb24gdGhlIHVzZXIgd2hlbiBoZSByZS12aXNpdHMgeW91ciBhcHBcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhLmxvZ2dlZEluID8gXCJMb2dnZWQgaW4gdG8gZmlyZWJhc2VcIiA6IFwiTG9nZ2VkIG91dCBmcm9tIGZpcmViYXNlXCIpO1xyXG4gICAgICAgIGlmIChkYXRhLmxvZ2dlZEluKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlcidzIGVtYWlsIGFkZHJlc3M6IFwiICsgKGRhdGEudXNlci5lbWFpbCA/IGRhdGEudXNlci5lbWFpbCA6IFwiTi9BXCIpKTtcclxuICAgICAgICAgICAgYXBwU2V0dGluZ3Muc2V0Qm9vbGVhbihcImlzTG9nZ2VkXCIsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcFNldHRpbmdzLnNldEJvb2xlYW4oXCJpc0xvZ2dlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBvbk1lc3NhZ2VSZWNlaXZlZENhbGxiYWNrOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGl0bGU6IFwiICsgbWVzc2FnZS50aXRsZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJCb2R5OiBcIiArIG1lc3NhZ2UuYm9keSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xyXG4gICAgICAgIC8vIGlmIHlvdXIgc2VydmVyIHBhc3NlZCBhIGN1c3RvbSBwcm9wZXJ0eSBjYWxsZWQgJ2ZvbycsIHRoZW4gZG8gdGhpczpcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlZhbHVlIG9mICdmb28nOiBcIiArIG1lc3NhZ2UuZmF2b3JpdGVzKTtcclxuICAgIH1cclxufSkudGhlbihpbnN0YW5jZSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmluaXQgZG9uZVwiKTtcclxufSkuY2F0Y2goZXJyID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiRmlyZWJhc2UgaW5pdCBlcnJvcjogXCIgKyBlcnIpO1xyXG59KTtcclxuXHJcbmlmIChhcHBsaWNhdGlvbi5hbmRyb2lkKSB7XHJcbiAgICBhcHBsaWNhdGlvbi5vbkxhdW5jaCA9IGZ1bmN0aW9uIChpbnRlbnQpIHtcclxuICAgICAgICBmcmVzY28uaW5pdGlhbGl6ZSgpO1xyXG4gICAgfTtcclxufVxyXG5cclxuLy8gYXBwbGljYXRpb24uc3RhcnQoeyBtb2R1bGVOYW1lOiBcInZpZXdzL2RyYXdlci1wYWdlXCIgfSk7XHJcbmFwcGxpY2F0aW9uLnN0YXJ0KHsgbW9kdWxlTmFtZTogXCJ2aWV3cy9sb2dpbi9sb2dpblwiIH0pO1xyXG4iXX0=